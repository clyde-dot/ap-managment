generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  fullName String @unique @map("full_name") @db.VarChar(50)
  email    String @unique @db.VarChar(50)
  password String

  token String?
  role  Role    @default(USER)

  accepted Task[] @relation("task_accepted")
  authors  Task[] @relation("task_authors")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum Role {
  ADMIN
  USER
  OPERATOR
  PROGRAMMER
}

model Region {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(100)
  locations Locality[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("regions")
}

model Locality {
  id       String       @id @default(uuid())
  name     String       @unique @db.VarChar(100)
  type     LocalityType
  regionId String       @map("region_id")

  region    Region    @relation(fields: [regionId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("locations")
}

enum LocalityType {
  CITY
  COUNTRYSIDE
}

model Client {
  id           String  @id @default(uuid())
  fullName     String  @unique @map("full_name") @db.VarChar(255)
  shortName    String  @unique @map("short_name") @db.VarChar(50)
  clientInfoId String? @map("client_info_id")

  clientInfo ClientInfo? @relation(fields: [clientInfoId], references: [id])
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  deletedAt  DateTime?   @map("deleted_at")

  @@map("clients")
}

model ClientInfo {
  id        String  @id @default(uuid())
  email     String  @unique @db.VarChar(50)
  phone     String? @db.VarChar(20)
  address   String? @db.VarChar(255)
  userCount Int     @default(0) @map("user_count")

  client    Client[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients_info")
}

model Task {
  id          String           @id @default(uuid())
  title       String           @db.VarChar(255)
  description String           @db.Text
  status      TaskStatus[]
  priority    TaskPriorityEnum @default(LOW)

  authorId String

  author   User   @relation("task_authors", fields: [authorId], references: [id])
  accepted User[] @relation("task_accepted")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("tasks")
}

model TaskStatus {
  id String @id @default(uuid())

  taskId  String         @map("task_id")
  status  TaskStatusEnum
  comment String?

  task Task @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks_status")
}

enum TaskStatusEnum {
  CREATED // Задача создана
  CANCELLED // Отменена
  SENT_FOR_DISCUSSION // Отправлена на обсуждение
  UNDER_DISCUSSION // В процессе обсуждения
  REJECTED // Отклонена
  ACCEPTED // Принята в работу
  IN_PROGRESS // Выполняется
  EXECUTED // Выполнена
  SENT_FOR_CHECKING // Отправлена на проверку
  ON_VERIFICATION // Проверяется
  SENT_FOR_REVISION // На доработке
  REWORKING // В доработке
  COMPLETED // Завершена
  CLOSED // Закрыта
  BLOCKED // Заблокирована
  DELAYED // Отложена
}

enum TaskPriorityEnum {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  ON_FREE_TIME
}
